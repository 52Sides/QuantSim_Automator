🚀 QuantSim Automator (v2.1) — Portfolio Simulation Web Platform
Stack: FastAPI + React + Kafka + Celery + PostgreSQL + Docker

🧠 Концепция
QuantSim Automator — это веб-платформа для симуляции инвестиционного портфеля по историческим данным.
Она объединяет асинхронную архитектуру, микросервисы, очереди задач и событийную шину Kafka для масштабирования и аналитики.

Цель: создать production-grade проект, демонстрирующий умение проектировать распределённые системы с FastAPI, React и Kafka.

🧩 Архитектура проекта
quant_sim_automator/
│
├── backend/
│   ├── app/
│   │   ├── main.py                     # FastAPI entrypoint
│   │   ├── api/
│   │   │   ├── routes/
│   │   │   │   ├── portfolio.py        # симуляции
│   │   │   │   ├── metrics.py          # метрики
│   │   │   │   ├── reports.py          # экспорт отчётов
│   │   │   │   └── events.py           # Kafka event endpoints
│   │   │   └── deps.py
│   │   ├── core/
│   │   │   ├── portfolio.py
│   │   │   ├── metrics.py
│   │   │   ├── fetchers/
│   │   │   │   ├── base_fetcher.py
│   │   │   │   ├── coingecko_fetcher.py
│   │   │   │   └── yfinance_fetcher.py
│   │   │   ├── config.py
│   │   │   └── models/
│   │   │       ├── asset.py
│   │   │       ├── result.py
│   │   │       └── event.py
│   │   ├── db/
│   │   │   ├── database.py             # SQLAlchemy + asyncpg (PostgreSQL)
│   │   │   └── models/
│   │   │       ├── asset_model.py
│   │   │       ├── simulation_model.py
│   │   │       └── metric_model.py
│   │   ├── services/
│   │   │   ├── worker.py               # Celery (фоновая симуляция)
│   │   │   ├── scheduler.py            # APScheduler
│   │   │   ├── kafka_producer.py       # публикация событий
│   │   │   └── kafka_consumer.py       # обработка событий
│   │   ├── exporters/
│   │   │   ├── html_report.py
│   │   │   ├── excel_exporter.py
│   │   │   └── visualizer.py
│   │   ├── utils/
│   │   │   ├── logger.py
│   │   │   ├── errors.py
│   │   │   └── decorators.py
│   │   └── tests/
│   │       ├── test_metrics.py
│   │       └── test_kafka_events.py
│   ├── requirements.txt
│   └── Dockerfile
│
├── frontend/
│   ├── src/
│   │   ├── api/
│   │   │   ├── client.ts
│   │   │   ├── portfolio.ts
│   │   │   └── events.ts               # подписка на Kafka через WebSocket Gateway
│   │   ├── components/
│   │   │   ├── PortfolioForm.tsx
│   │   │   ├── MetricsTable.tsx
│   │   │   ├── ChartView.tsx
│   │   │   ├── ReportCard.tsx
│   │   │   └── Notifications.tsx       # реалтайм события (через Kafka gateway)
│   │   ├── pages/
│   │   │   ├── Dashboard.tsx
│   │   │   ├── Reports.tsx
│   │   │   └── Settings.tsx
│   │   ├── store/
│   │   │   └── portfolioStore.ts
│   │   ├── main.tsx
│   │   └── App.tsx
│   ├── vite.config.ts
│   ├── package.json
│   └── Dockerfile
│
├── kafka/
│   ├── docker-compose.override.yml     # брокер Kafka + Zookeeper
│   ├── topics_config/
│   │   ├── portfolio-events.json       # симуляции
│   │   ├── report-events.json
│   │   └── metrics-events.json
│   └── README.md
│
├── docker-compose.yml                  # orchestration (backend + frontend + kafka + redis + postgres)
├── .env
├── README.md
└── mkdocs.yml

⚙️ Ключевые технологии
Категория		Технологии						Назначение
Frontend		React (Vite, TS), Zustand, Plotly.js, Tailwind, Axios	UI/UX, графики, отчёты
Backend (API)		FastAPI, Pydantic, Celery, Kafka, Redis	REST API, 	фоновые задачи, события
База данных		PostgreSQL (asyncpg + SQLAlchemy 2.0)			единая БД для активов, симуляций, метрик
Асинхронность		asyncio, aiohttp					конкурентная загрузка котировок
Событийная шина		Apache Kafka						обмен событиями между сервисами
Данные / Аналитика	pandas, numpy						расчёт метрик
Визуализация / Отчёты	plotly, jinja2, openpyxl				отчёты и графики
DevOps			Docker, docker-compose, GitHub Actions			контейнеризация и CI/CD
Тестирование		pytest, httpx, jest					тесты backend/frontend
Документация		mkdocs-material						документация API и архитектуры

🧠 Потоки данных и событийная схема
       ┌────────────────────────────┐
       │         React UI           │
       │  ────────────────────────  │
       │  PortfolioForm / Charts    │
       └──────────────┬─────────────┘
                      │ REST API
                      ▼
              ┌──────────────────┐
              │   FastAPI API    │
              │/simulate, /report│
              └─────────┬────────┘
                        │
              ┌─────────▼──────────┐
              │ Celery Worker      │
              │ симуляция портфеля │
              └─────────┬──────────┘
                        │ Kafka event: "simulation.completed"
                        ▼
             ┌──────────────────────────┐
             │ Kafka Broker (topics):   │
             │ - portfolio-events       │
             │ - report-events          │
             │ - metrics-events         │
             └───────────┬──────────────┘
                         │ consumer
              ┌──────────▼──────────────┐
              │ Analytics / Exporters   │
              │ HTML, Excel, Plotly     │
              └──────────┬──────────────┘
                         │
                         ▼
                 PostgreSQL Storage
                 (Assets, Metrics, Jobs)

🧩 Kafka Топики и события
Topic			Событие			Payload (пример)
portfolio-events	simulation.started	{ "job_id": "uuid", "assets": ["AAPL", "BTC"], "start": "...", "end": "..." }
portfolio-events	simulation.completed	{ "job_id": "uuid", "result": {...}, "duration": 1.23 }
report-events		report.generated	{ "report_id": "uuid", "format": "html", "path": "..." }
metrics-events		metrics.updated		{ "portfolio_id": 12, "sharpe": 1.23, "drawdown": 0.2 }

💥 Почему версия 2.1 “бомбовая” 🔥
✅ Kafka-first архитектура — event-driven система с микросервисами
✅ Полностью PostgreSQL — production база, удобная для аналитики
✅ Асинхронность — aiohttp + Celery + FastAPI
✅ Реалтайм нотификации — обновления через Kafka → WebSocket → React
✅ Модульная структура — backend, worker, frontend, kafka в docker-compose
✅ CI/CD + DevOps stack — GitHub Actions, Docker, .env, линтеры
✅ Data Science возможности — pandas, numpy, Plotly
✅ Production стиль — документация, логирование, строгие модели данных
✅ Расширяемость — можно добавить аналитические стримы, ML или Telegram-бота